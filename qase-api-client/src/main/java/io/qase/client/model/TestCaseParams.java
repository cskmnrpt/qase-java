/*
 * Qase.io API
 * Qase API Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.qase.client.model;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.qase.client.JSON;

import javax.ws.rs.core.GenericType;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-04T01:02:11.281898+03:00[Europe/Moscow]")
public class TestCaseParams extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TestCaseParams.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TestCaseParams.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TestCaseParams' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<List> adapterListObject = gson.getDelegateAdapter(this, TypeToken.get(List.class));
            final TypeAdapter<Object> adapterObject = gson.getDelegateAdapter(this, TypeToken.get(Object.class));

            return (TypeAdapter<T>) new TypeAdapter<TestCaseParams>() {
                @Override
                public void write(JsonWriter out, TestCaseParams value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `List&lt;Object&gt;`
                    if (value.getActualInstance() instanceof List) {
                        JsonObject obj = adapterListObject.toJsonTree((List) value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `Object`
                    if (value.getActualInstance() instanceof Object) {
                        JsonObject obj = adapterObject.toJsonTree((Object) value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: List<Object>, Object");
                }

                @Override
                public TestCaseParams read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize List<Object>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        log.log(Level.FINER, "Input data matches schema 'List<Object>'");
                        TestCaseParams ret = new TestCaseParams();
                        ret.setActualInstance(adapterListObject.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'List<Object>'", e);
                    }

                    // deserialize Object
                    try {
                        // validate the JSON object to see if any exception is thrown
                        log.log(Level.FINER, "Input data matches schema 'Object'");
                        TestCaseParams ret = new TestCaseParams();
                        ret.setActualInstance(adapterObject.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'Object'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for TestCaseParams: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public TestCaseParams() {
        super("anyOf", Boolean.FALSE);
    }

    public TestCaseParams(List<Object> o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TestCaseParams(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("List<Object>", new GenericType<List<Object>>() {
        });
        schemas.put("Object", new GenericType<Object>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return TestCaseParams.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * List<Object>, Object
     * <p>
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof List) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Object) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be List<Object>, Object");
    }

    /**
     * Get the actual instance, which can be the following:
     * List<Object>, Object
     *
     * @return The actual instance (List<Object>, Object)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `List<Object>`. If the actual instance is not `List<Object>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<Object>`
     * @throws ClassCastException if the instance is not `List<Object>`
     */
    public List<Object> getListObject() throws ClassCastException {
        return (List<Object>) super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object) super.getActualInstance();
    }


    /**
     * Create an instance of TestCaseParams given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TestCaseParams
     * @throws IOException if the JSON string is invalid with respect to TestCaseParams
     */
    public static TestCaseParams fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TestCaseParams.class);
    }

    /**
     * Convert an instance of TestCaseParams to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

